@using ECommerce.ApplicationCore.Models
@model List<CartItem>

<h2>Shopping Cart</h2>
 @if (Model.Count() > 0)
    {
<table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr id="@item.Product.Id">
                <td>@item.Product.Name</td>
                <td class="price">@item.Product.Price</td>
                <td >
                    <input type="number" value="@item.Quantity" min="1" max="@item.Product.Quantity" />
                </td>
                <td class="totalUnitPrice">@(item.Product.Price * item.Quantity)</td>
                <td>
                    <a asp-action="RemoveFromCart" class="btn btn-warning" asp-route-productId="@item.Product.Id" asp-controller="Cart">Remove Item</a>
                </td>
            </tr>
        }
    </tbody>
</table>
    <div id="totalOrderPrice"></div>
<a asp-action="Create" class="btn btn-success"  asp-controller="Order">Add Order</a>

 }
    else
    {
        <p>No itemes in your wishlist</p>
    }


    @section Scripts {
<script>
$(document).ready(function () 
{
    function updateQuantityInCookies(productId, quantity) {
        var cartItems = JSON.parse(getCookie('Cart')) || [];
            console.log(cartItems)
            console.log(productId)
            console.log(quantity)

        var item = cartItems.find(i => i.ProductId == productId);
        if (item) {
            item.Quantity = quantity;
            console.log(item)
        }
        setCookie('Cart', JSON.stringify(cartItems), 7);
    }
    function getCookie(key) {
    var cookies = document.cookie.split('; ');
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i].split('=');
        if (cookie[0] === key) {
            return decodeURIComponent(cookie[1]);
        }
    }
    return null; 
}
   function setCookie(key, value, expirationDays) {
    var expires = "";
    if (expirationDays) {
        var date = new Date();
        date.setTime(date.getTime() + (expirationDays * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = key + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function updateTotalOrderPrice() {
    var totalOrderPrice = 0;
    $('tbody tr').each(function() {
        var price = parseFloat($(this).find('.price').text());
        var quantity = parseInt($(this).find('input[type="number"]').val());
        var subtotal = price * quantity;
        totalOrderPrice += subtotal;
    });
    $('#totalOrderPrice').text('Total Order Price: ' + totalOrderPrice.toFixed(2));
}

    
    $('input[type="number"]').change(function () {
        console.log(this)
        var quantity = $(this).val();
        var productId = $(this).closest('tr')[0].id;
        var price = parseFloat($(this).closest('tr').find('.price').text());
        var totalPrice = price * quantity;
        $(this).closest('tr').find('.totalUnitPrice').text(totalPrice.toFixed(2));
       
        console.log("hhhj")
        console.log($(this).closest('tr'))
        console.log(price)
        console.log(productId)
        updateQuantityInCookies(productId, quantity);
        updateTotalOrderPrice();


        
    });
    updateTotalOrderPrice();
})
</script>
}
  
 @*//function QuantityChange(/*input, price, productId*/) {
    //    var quantity = input.value;
    //    var totalPrice = price * quantity;
    //    updateQuantityInCookies(productId, quantity);
    //    var totalPrice = parseFloat(price) * parseInt(quantity);
    //   input.closest('tr').find('.totalUnitPrice').text(totalPrice.toFixed(2));

    //}*@
    